--- /dev/null
+++ b/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java
@@ -1,0 +1,62 @@
+package org.bukkit.craftbukkit.generator;
+
+import net.minecraft.src.Chunk;
+import net.minecraft.src.IChunkProvider;
+import net.minecraft.src.IProgressUpdate;
+import net.minecraft.src.World;
+import org.bukkit.generator.BlockPopulator;
+import ru.vladthemountain.lilybukkit.core.LBWorld;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+@Deprecated
+public class NormalChunkGenerator extends InternalChunkGenerator {
+
+    private final IChunkProvider provider;
+
+    public NormalChunkGenerator(World world, long seed) {
+        provider = world.chunkProvider;
+    }
+
+    public byte[] generate(org.bukkit.World world, Random random, int x, int z) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public boolean canSpawn(org.bukkit.World world, int x, int z) {
+        return ((LBWorld) world).getHandle().worldProvider.canSpawn(x, z);
+    }
+
+    public List<BlockPopulator> getDefaultPopulators(org.bukkit.World world) {
+        return new ArrayList<BlockPopulator>();
+    }
+
+    public boolean isChunkLoaded(int i, int i1) {
+        return provider.isChunkLoaded(i, i1);
+    }
+
+    public Chunk getOrCreateChunk(int i, int i1) {
+        return provider.getOrCreateChunk(i, i1);
+    }
+
+    public Chunk getChunkAt(int i, int i1) {
+        return provider.getOrCreateChunk(i, i1);
+    }
+
+    public void getChunkAt(IChunkProvider icp, int i, int i1) {
+        icp.getOrCreateChunk(i, i1);
+    }
+
+    public boolean saveChunks(boolean bln, IProgressUpdate ipu) {
+        return provider.saveChunks(bln, ipu);
+    }
+
+    public boolean unloadChunks() {
+        return provider.unloadChunks();
+    }
+
+    public boolean canSave() {
+        return provider.canSave();
+    }
+}
